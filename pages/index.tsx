import { useTheme } from "next-themes";
import Head from "next/head";
import { FormEvent, SyntheticEvent, useEffect, useRef, useState } from "react";
import ArrowDownSvg from "../components/ArrowDownSvg";
import ArrowUpSvg from "../components/ArrowUpSvg";
import MoonSvg from "../components/MoonSvg";
import Problem from "../components/Problem";
import SunSvg from "../components/SunSvg";
import { inquisitor } from "../library/fake";
import fetcher from "../library/fetcher";

type Run = { text: string; problem: boolean };

export default function Home() {
	const [selectedFile, setSelectedFile] = useState<File>();
	const { theme, setTheme } = useTheme();

	const [report, setReport] = useState<Run[]>([]);

	const [positions, setPositions] = useState<number[]>([]);

	async function handleSubmit(e: FormEvent) {
		e.preventDefault();
		if (selectedFile) {
			setPositions([]);
			setReport([]);
			const formFile = new FormData();
			formFile.append("file", selectedFile);
			const res = await fetcher<Run[]>(
				"http://localhost:8000/report?lookahead=50&stop_words=and",
				"POST",
				formFile
			);

			console.log(res);
			if ("message" in res) {
				setReport([{ text: res.message, problem: true }]);
			} else {
				setReport(res);
			}
		} else {
			setReport([{ text: "Please pick a file.", problem: true }]);
		}
	}

	function scrollTo(dir: "up" | "down") {
		// alert(dir);
		const currY = window.scrollY;
		let nextY: number;

		if (dir === "up") {
			nextY = positions.find((pos, i) => positions[i + 1] > currY) || currY;
		} else {
			nextY = positions.find((pos) => pos > currY) || currY;
		}

		window.scrollTo({ top: nextY });
	}

	function handleLoadProblem(n: number) {
		setPositions((pre) => [...pre, n]);
	}

	useEffect(() => {
		console.log(positions);
	}, [positions]);

	return (
		<div className="w-full h-full">
			<Head>
				<meta name="description" content="Generated by create next app" />
				<meta property="og:title" content="Tonal Distancing" />
				<meta property="og:description" content="Tonal Distancing" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<aside className="flex flex-col items-center m-4">
				<form onSubmit={handleSubmit} className="flex flex-col items-center">
					<label className="invisible" htmlFor="fileinput">
						Upload File
					</label>
					<input
						id="fileinput"
						name="fileinput"
						type="file"
						// value={selectedFile}
						onChange={(e) => {
							if (e.target.files) {
								setSelectedFile(e.target.files[0]);
							}
						}}
						className="file:border-0 file:bg-at-pink dark:file:bg-drac-green dark:file:text-drac-black  file:rounded-full hover:file:underline file:p-3 file:font-bold file:opacity-90 hover:file:opacity-100 transition-opacity file:w-full file:cursor-pointer"
					/>

					<p className="mt-6">{selectedFile?.name}</p>
					<label htmlFor="submit" className="invisible">
						Submit
					</label>
					<input
						type="submit"
						id="submit"
						name="submit"
						className="block 
								bg-at-blue dark:bg-drac-purple dark:text-drac-black 
								border-0 opacity-90 hover:opacity-100 transition-opacity 
								font-sans font-bold p-3 px-4 rounded-full w-full 
								hover:underline cursor-pointer"
					/>
				</form>
			</aside>
			<main className="z-10 flex flex-col items-center w-full">
				<div className="max-w-[75ch] text-2xl text-justify">
					{Boolean(report)
						? report.map((run, i) =>
								run.problem ? (
									<Problem
										key={run.text + i}
										text={run.text}
										onLoad={handleLoadProblem}
									/>
								) : (
									<p
										className={`my-2 text-black whitespace-pre-line font-serif text-justify
										dark:selection:bg-drac-white
										${run.problem ? "text-at-red dark:text-drac-red problem" : "text-at-ice dark:text-drac-white"}
										`}
										key={run.text + i}
									>
										{run.text}
									</p>
								)
						  )
						: "aoh wfawohf\nawohf\naowhe foaeh foa;wf haweiohf awoiefh\nawoe;f eoifh eofih eiofh eoifh ;oifh wo;ifh\na;oiefh ao;wefih\nawo;efh aw;oiefh aweoi;hf"}
				</div>
			</main>
			<button
				onClick={() => setTheme(theme === "light" ? "dark" : "light")}
				className="w-8 h-8 fixed bottom-8 right-8 z-10 hover:scale-125 transition-transform"
			>
				{theme === "light" ? <SunSvg /> : <MoonSvg />}
			</button>

			{Boolean(report) && (
				<div className="flex flex-col items-center fixed bottom-8 left-8">
					<button
						className="block w-8 h-8 hover:scale-125 transition-transform"
						onClick={() => scrollTo("up")}
					>
						<ArrowUpSvg />
					</button>
					<button
						className="block w-8 h-8 hover:scale-125 transition-transform"
						onClick={() => scrollTo("down")}
					>
						<ArrowDownSvg />
					</button>
				</div>
			)}
		</div>
	);
}
