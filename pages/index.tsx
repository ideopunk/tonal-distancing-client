import Head from "next/head";
import { FormEvent, useCallback, useEffect, useRef, useState } from "react";
import ArrowDownSvg from "../components/ArrowDownSvg";
import ArrowUpSvg from "../components/ArrowUpSvg";
import Problem from "../components/Problem";
import SubmissionForm from "../components/SubmissionForm";
import fetcher from "../library/fetcher";

type Run = { text: string; repeated: boolean };

function PointerSystem({ positions }: { positions: number[] }) {
	const [arrowPosition, setArrowPosition] = useState(0);

	useEffect(() => {
		if (positions) {
			setArrowPosition(0);
		}
	}, [positions]);
	function scrollTo(dir: "up" | "down") {
		if (dir === "down" && arrowPosition !== 0) {
			window.scrollTo({ top: positions[arrowPosition - 1] - 20 });
			setArrowPosition((a) => (a ? a - 1 : a));
		} else if (dir === "up" && arrowPosition !== positions.length - 1) {
			window.scrollTo({ top: positions[arrowPosition + 1] - 20 });
			setArrowPosition((a) => (a !== positions.length ? a + 1 : a));
		}
	}

	return (
		<>
			{!!positions.length && (
				<div
					className="absolute text-at-red dark:text-drac-red flex justify-center w-full -rotate-90 h-8 right-[65ch]"
					style={{ top: positions[arrowPosition] }}
				>
					<ArrowDownSvg />
				</div>
			)}
			<div className="flex flex-col items-center fixed bottom-8 left-8">
				<button
					title="Jump to the previous clump"
					className="block w-8 h-8 hover:scale-125 transition-transform"
					onClick={() => scrollTo("down")}
				>
					<ArrowUpSvg />
				</button>
				<button
					title="Jump to the next clump"
					className="block w-8 h-8 hover:scale-125 transition-transform"
					onClick={() => scrollTo("up")}
				>
					<ArrowDownSvg />
				</button>
			</div>
		</>
	);
}

export default function Home() {
	const [report, setReport] = useState<Run[]>([]);
	const [positions, setPositions] = useState<number[]>([]);

	function handleReport(runs: Run[]) {
		setPositions([]);
		setReport(runs);
	}

	const handleLoadProblem = useCallback((n: number) => {
		setPositions((pre) => {
			const latest = pre[pre.length - 1];
			if (n - latest < 150) return pre;
			return [...pre, n];
		});
	}, []);

	return (
		<div className="w-full h-full pb-8">
			<Head>
				<meta name="description" content="Generated by create next app" />
				<meta property="og:title" content="Tonal Distancing" />
				<meta property="og:description" content="Tonal Distancing" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<aside className="flex flex-col items-center p-4 mb-2">
				<SubmissionForm handleReport={handleReport} />
			</aside>
			<main className="z-10 flex flex-col items-center w-full">
				<div className="max-w-[75ch] text-2xl text-justify">
					{Boolean(report) &&
						report.map((run, i) =>
							run.repeated ? (
								<Problem
									key={run.text + i}
									text={run.text}
									onLoad={handleLoadProblem}
								/>
							) : (
								<span
									className={`my-2 text-black dark:text-drac-white whitespace-pre-line font-serif text-justify inline
										dark:selection:bg-drac-white`}
									key={run.text + i}
								>
									{run.text}
								</span>
							)
						)}
				</div>
			</main>

			<PointerSystem positions={positions} />
		</div>
	);
}
