import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import ArrowDownSvg from "../ArrowDownSvg";
import ArrowUpSvg from "../ArrowUpSvg";
import fetcher from "../library/fetcher";

type Run = { text: string; problem: boolean };
export default function Home() {
	const [selectedFile, setSelectedFile] = useState<File>();
	const [report, setReport] = useState<Run[]>([
		{ text: "yabadaba", problem: false },
		{ text: "doo\n", problem: true },
		{ text: "nabayaba", problem: false },
		{ text: "doo", problem: true },
	]);

	async function handleSubmit() {
		const res = await fetcher<Run[]>("/fake", "PUT", selectedFile);
		if ("message" in res) {
			alert(res.message);
			setReport([{ text: res.message, problem: true }]);
		} else {
			setReport(res);
		}
	}

	return (
		<div className="w-screen h-screen bg-dune-white flex justify-center items-center">
			<Head>
				<meta name="description" content="Generated by create next app" />
				<meta property="og:title" content="CNR" />
				<meta property="og:description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="flex w-full h-full">
				<aside className="w-40">
					<form onSubmit={handleSubmit} className="flex flex-col">
						<label className="invisible" htmlFor="fileinput">
							Upload File
						</label>
						<input
							id="fileinput"
							name="fileinput"
							type="file"
							// value={selectedFile}
							onChange={(e) => {
								if (e.target.files) {
									setSelectedFile(e.target.files[0]);
								}
							}}
							className="file:border-0 file:bg-dune-green file:text-dune-white file:rounded-full file:p-3 file:font-bold file:opacity-90 hover:file:opacity-100 transition-opacity"
						/>

						<label htmlFor="submit" className="invisible">
							Submit
						</label>
						<input
							type="submit"
							id="submit"
							name="submit"
							className="block border bg-dune-blue opacity-90 hover:opacity-100 transition-opacity font-sans font-bold p-3 px-4 rounded-full"
						/>
					</form>

					{Boolean(report) && (
						<div>
							<button className="block">
								<ArrowUpSvg />
							</button>
							<button className="block">
								<ArrowDownSvg />
							</button>
						</div>
					)}
				</aside>
				<main className="z-10 flex flex-col items-center w-full h-full border-2">
					<div className="max-w-prose">
						{Boolean(report)
							? report.map((run) => (
									<span
										className={`my-2 whitespace-pre-line ${
											run.problem ? "text-dune-red problem" : "text-dune-grey"
										}`}
										key={run.text.slice(0, 10)}
									>
										{run.text}
									</span>
							  ))
							: "aoh wfawohf\nawohf\naowhe foaeh foa;wf haweiohf awoiefh\nawoe;f eoifh eofih eiofh eoifh ;oifh wo;ifh\na;oiefh ao;wefih\nawo;efh aw;oiefh aweoi;hf"}
					</div>
				</main>
			</div>
		</div>
	);
}
